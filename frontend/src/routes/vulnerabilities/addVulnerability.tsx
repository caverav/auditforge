import PrimaryButton from "../../components/button/PrimaryButton"
import SimpleInput from "../../components/input/SimpleInput";
import SelectDropdown from "../../components/dropdown/SelectDropdown";
import { t } from "i18next"
import { useState } from "react";
import TextArea from '../../components/text/TextArea';
import RichText from '../../components/text/RichText';
import { XMarkIcon } from '@heroicons/react/24/outline';
import Modal from "../../components/modal/Modal";
import { postVulnerability } from "../../services/vulnerabilities";


type Details = {
  locale: string;
  title: string;
  vulnType: string;
  description: string;
  observation: string;
  remediation: string;
  cwes: string[];
  references: string[];
  customFields: string[];
} 

type AddVulnerabilityData = {
  cvssv3: string;
  priority: number;
  remediationComplexity: number;
  details: Details[];
  category: string; 
};

type LanguageData = {
  language: string;
  locale: string;
};

type CategoryData = {
  _id: string;
  name: string;
  sortValue: string;
  sortOrder: string;
  sortAuto: boolean;
};

type TypeData = {
  name: string;
  locale: string;
};

interface ListItem {
  id: number;
  value: string;
}

interface addVulnerabilityProps {
  isOpen: boolean;
  handlerIsOpen: React.Dispatch<React.SetStateAction<boolean>>;
  categoryVuln: string;
  languages: ListItem[]
  types: ListItem[];
}


const AddVulnerability: React.FC<addVulnerabilityProps> = ({ isOpen, handlerIsOpen, categoryVuln, languages, types}) => {
  
  const [openModal, setOpenModal] = useState(false)
  const [error, setError] = useState<string | null>(null);

  const closeSlidingPage = () => {
    setOpenModal(false);
    handlerIsOpen(false);
  }
  const onSubmitSlidingPage = () => {
    // Lógica de confirmación
    console.log(data);
    //handlerIsOpen(false);
    
  };

  const handleSubmitNewVulnerability = async () => {
    console.log(data)
    console.log([data])
    
    try {
      await postVulnerability([data]);
    } catch (error) {
      setError("Error creating audit");
      console.error("Error:", error);
    }
    console.log(data)
    handlerIsOpen(!isOpen);
    
  };


  const complexityOptions = [
    { id: 1, value: t('easy')},
    { id: 2, value: t('medium') },
    { id: 3, value: t('complex') },
  ]

  const priorityOptions = [
    { id: 1, value: t('low')},
    { id: 2, value: t('medium') },
    { id: 3, value: t('high') },
    { id: 4, value: t('urgent') },
  ]

  const [complexity, setComplexity] = useState(complexityOptions[0])
  const [priority, setPriority] = useState(priorityOptions[0])
  const [language, setLanguage] = useState<ListItem>(languages[0])
  const [type, setType] = useState<ListItem>(
    types.length > 0 ? types[0] : {id: 0, value: ""}
  )
  

  const [data, setData] = useState<AddVulnerabilityData>({
    cvssv3: "",
    remediationComplexity: complexity.id,
    details: [{
      locale: language.value,
      title: "",
      vulnType: type.value,
      description: "",
      observation: "",
      remediation: "",
      cwes: [],
      references: [],
      customFields: []
    }],
    category: categoryVuln,
    priority: priority.id
  })


  /*
  const handleInputChange = (name: string, value: string) => {
    setData(prevData => ({
      ...prevData,
      details: [
        {
          ...prevData.details[0],
          [name]: value
        }
      ]
    }));
  };
  */

  const handleInputChange = (field: string, value: string) => {
    setData(prevData => ({
      ...prevData,
      details: prevData.details.map((detail, index) => 
        index === 0
          ? {
              ...detail,
              [field]: field === 'cwes' || field === 'references'
                ? value.split('\n')
                : value
            }
          : detail
      )
    }));
  };
  

  return (
    <>
      <div
        className={`fixed inset-0 bg-black bg-opacity-50 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}
        onClick={() => setOpenModal(true)}
        aria-hidden="true"
      />
      {openModal && 
        <div className="fixed z-10">
          <Modal 
            title={t('msg.doYouWantToLeave')}
            onCancel={() => setOpenModal(false)}
            onSubmit={closeSlidingPage}
            cancelText={t('btn.stay')}
            submitText={t('btn.confirm')}
            isOpen={openModal}
          >
          <></>
          </Modal>
        </div>
      }

      <div
        className={`fixed top-0 right-0 h-full w-1/2 bg-gray-700 shadow-lg transform transition-transform duration-300 ${
          isOpen ? 'translate-x-0 overflow-y-auto' : 'translate-x-full'}`}
      >
        <div className="ml-3 mt-3 flex justify-between items-center">
          <div className="flex items-center">
            <h3 className="text-xl font-bold p-1">{t('addVulnerability')}</h3>
            <span className="p-4 rounded-md border-0 text-white">{categoryVuln}</span>
          </div>
          <button
            onClick={() => setOpenModal(true)}
            className="bg-transparent text-white p-2 rounded mx-3"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>
        <hr className="h-1 my-3 bg-gray-600 border-0 rounded" />
        <div className="flex">
          <div className="w-2/3 p-4">
            <SimpleInput
                label={t('title')}
                id="title"
                name="title"
                type="text"
                placeholder="search"
                value={data.details[0].title}
                onChange={(value) => handleInputChange("title",value)}
            />
          </div>
          <div className="w-1/6 p-4">
            <SelectDropdown 
              title={t('type')} 
              items={types}
              selected={type}
              onChange={setType}
            />
          </div>
          <div className="w-1/6 p-4 relative">
            <SelectDropdown 
              title={t('language')} 
              items={languages}
              selected={language}
              onChange={setLanguage}
            />
          </div>
            
        </div>
        <div>
          <RichText 
            label={t('description')}
            value={data.details[0].description}
            onChange={(value) => handleInputChange("description",value)}
            placeholder={"description"}
          />
        </div>
        <div>
          <RichText 
            label={t('observation')}
            value={data.details[0].observation}
            onChange={(value) => handleInputChange("observation",value)}
            placeholder={"observation"}
          />
        </div>
        <div>
          <RichText 
            label={t('remediation')}
            value={data.details[0].remediation}
            onChange={(value) => handleInputChange("remediation",value)}
            placeholder={"remediation"}
          />
        </div>

        
        
        <div className="flex">
          <div className="w-1/2 p-4">
            <SelectDropdown 
              title={t('remediationComplexity')} 
              items={complexityOptions}
              selected={complexity}
              onChange={setComplexity}
            />
          </div>
          <div className="w-1/2 p-4 relative">
            <SelectDropdown 
              title={t('remediationPriority')} 
              items={priorityOptions}
              selected={priority}
              onChange={setPriority}
            />
          </div>
        </div>
        <div>
          <TextArea 
            label={t('references')}
            rows={4}
            value={Array.isArray(data.details[0].references) ? data.details[0].references.join('\n') : data.details[0].references}
            onChange={(value) => handleInputChange("references",value)}
            placeholder={"references"}
            id={"references"}
            name={"references"}
          />
        </div>
        <div>
          <TextArea 
            label={"CWEs"}
            rows={4}
            value={data.details[0].cwes.join("\n")}
            onChange={(value) => handleInputChange("cwes",value)}
            placeholder={"cwes"}
            id={"cwes"}
            name={"cwes"}
          />
        </div>
        <div className="mb-2 mx-4 flex justify-end">
          <PrimaryButton onClick={handleSubmitNewVulnerability}>
            <span>{t('addVulnerability')}</span>
          </PrimaryButton>
        </div>
      </div>
    </>
  );

};

export default AddVulnerability;