import PrimarySwitch from "../../components/switch/PrimarySwitch"
import PrimaryButton from "../../components/button/PrimaryButton"
import SimpleInput from "../../components/input/SimpleInput";
import SelectDropdown from "../../components/dropdown/SelectDropdown";
import { t } from "i18next"
import Modal from "../../components/modal/Modal";
import { ChangeEvent, useState } from "react";
import TextArea from '../../components/text/TextArea';
import RichText from '../../components/text/RichText';

type Details = {
  locale: string;
  title: string;
  vulnType: string;
  description: string;
  observation: string;
  remediation: string;
  cwes: string[];
  references: string[];
  customFields: string[];
} 

type AddVulnerabilityData = {
  cvssv3: string;
  priority: number;
  remediationComplexity: string;
  details: Details[];
  category: string; 
};

type LanguageData = {
  language: string;
  locale: string;
};

type CategoryData = {
  _id: string;
  name: string;
  sortValue: string;
  sortOrder: string;
  sortAuto: boolean;
};

type TypeData = {
  name: string;
  locale: string;
};

interface ListItem {
  id: number;
  value: string;
}

interface addVulnerabilityProps {
  isOpen: boolean;
  handlerIsOpen: React.Dispatch<React.SetStateAction<boolean>>;
  categoryVuln: string;
}

  //const [isModalOpen, setIsModalOpen] = useState(false);
const AddVulnerability: React.FC<addVulnerabilityProps> = ({ isOpen, handlerIsOpen, categoryVuln}) => {
  
  const closeModal = () => handlerIsOpen(false);
  const onSubmitModal = () => {
    // Lógica de confirmación
    handlerIsOpen(false);
    console.log()
  };

  /*
  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setData((prevData) => ({
      ...prevData,
      details: prevData.details.map((detail, index) => ({
        ...detail,
        title: index === 0 ? event.target.value : detail.title // Assuming you want to update the first detail's title
      }))
    }));
  };
  */
  ////// Estados de testing
  const [currentCategory2, setCurrentCategory2] = useState<ListItem>({id: 0, value: t('noCategory')});
  const [categories, setCategories] = useState<ListItem[]>([{id: 0, value: t('noCategory')},{id: 0, value: "Category2"}]);
  
  
  const [remComplexity, setRemComplexity] = useState<ListItem[]>([{id: 0, value: t('easy')},{id: 1, value: t('medium')},{id: 2, value: t('complex')}]);
  const [currentRemComplexity, setCurrentRemComplexity] = useState<ListItem>({id: 0, value: t('easy')});
  
  
  const [remPriorities, setRemPriorities] = useState<ListItem[]>([{id: 0, value: t('low')},{id: 1, value: t('medium')},{id: 2, value: t('high')},{id: 2, value: t('urgent')}]);
  const [remPriority, setRemPriority] = useState<ListItem>({id: 0, value: t('easy')});
  ////// Estados de testing
  
  

  const [data, setData] = useState<AddVulnerabilityData>({
    cvssv3: "",
    remediationComplexity: "",
    details: [{
      locale: "",
      title: "",
      vulnType: "",
      description: "",
      observation: "",
      remediation: "",
      cwes: [],
      references: [],
      customFields: []
    }],
    category: categoryVuln,
    priority: 0
  })

  
  
 
  const handleTypeChange = (name: string, selectedItem: ListItem) => {
    // Actualiza el estado 'data' con el nuevo tipo de vulnerabilidad
    /*
    setData(prevData => ({
      ...prevData,
      details: prevData.details.map(detail => ({
        ...detail,
        vulnType: selectedItem.value
      }))
    }));
    */
   console.log(name,selectedItem)
  };
  
  const handleTypeChange2 = (value: ListItem) => {
    // Update the state with the new selected item
    setData(prevData => ({
      ...prevData,
      // Assuming you want to update a specific part of the state
      // For example, if you want to update `details[0].vulnType`:
      details: prevData.details.map(detail => ({
        ...detail,
        vulnType: value.value
      }))
    }));
  };
  
  

  const handleTitleChange = (value: string) => {
    setData(prevData => ({
      ...prevData,
      details: prevData.details.map((detail, index) =>
        index === 0 // Asegúrate de actualizar el detalle correcto si hay más de uno
          ? { ...detail, title: value }
          : detail
      )
    }));
  };

  /*
  const handleInputChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setData(prevData => ({
      ...prevData,
      details: [
        {
          ...prevData.details[0],
          [name]: value
        }
      ]
    }));
  };
  */
  const handleInputChange = (name: string, value: string) => {
    setData(prevData => ({
      ...prevData,
      details: [
        {
          ...prevData.details[0],
          [name]: value
        }
      ]
    }));
  };


  return (
    <>
      <div
        className={`fixed inset-0 bg-black bg-opacity-50 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}
        onClick={closeModal}
        aria-hidden="true"
      />
      <div
        className={`fixed top-0 right-0 h-full w-1/2 bg-gray-700 shadow-lg transform transition-transform duration-300 ${
          isOpen ? 'translate-x-0 overflow-y-auto' : 'translate-x-full'}`}
      >
        
        <div className="ml-3 mt-3 flex justify-between items-center">
          <div className="flex items-center">
            <h3 className="text-xl font-bold p-1">Add Vulnerability</h3>
            <span className="p-4 rounded-md border-0 text-white">{categoryVuln}</span>
          </div>
          <button
            onClick={() => handlerIsOpen(false)}
            className="bg-red-500 text-white p-2 rounded mx-3"
          >
            Close
        </button>
        </div>
        <hr className="h-1 my-3 bg-gray-600 border-0 rounded" />
        <div className="flex">
          <div className="w-2/3 p-4">
            <SimpleInput
                label={t('title')}
                id="title"
                name="title"
                type="text"
                placeholder="search"
                value={data.details[0].title}
                onChange={handleTitleChange}
            />
          </div>
          <div className="w-1/6 p-4">
            <SelectDropdown 
              title={t('type')} 
              items={categories}
              selected={currentCategory2}
              onChange={setCurrentCategory2}
            />
          </div>
          <div className="w-1/6 p-4 relative">
            <SelectDropdown 
              title={t('language')} 
              items={categories}
              selected={currentCategory2}
              onChange={setCurrentCategory2}
            />
          </div>
            
        </div>
        <div>
          <RichText 
            label={"description"}
            value={data.details[0].description}
            onChange={(value) => handleInputChange("description",value)}
            placeholder={"description"}
          />
        </div>
        <div>
          <RichText 
            label={"observation"}
            value={data.details[0].observation}
            onChange={(value) => handleInputChange("observation",value)}
            placeholder={"observation"}
          />
        </div>
        <div>
          <RichText 
            label={"remediation"}
            value={data.details[0].remediation}
            onChange={(value) => handleInputChange("remediation",value)}
            placeholder={"remediation"}
          />
        </div>

        
        
        <div className="flex">
          <div className="w-1/2 p-4">
            <SelectDropdown 
              title={t('remediationComplexity')} 
              items={remComplexity}
              selected={currentRemComplexity}
              onChange={setCurrentRemComplexity}
            />
          </div>
          <div className="w-1/2 p-4 relative">
            <SelectDropdown 
              title={t('remediationPriority')} 
              items={remPriorities}
              selected={remPriority}
              onChange={setRemPriority}
            />
          </div>
        </div>
        <div>
          <TextArea 
            label={"references"}
            rows={4}
            value={data.details[0].references}
            onChange={(value) => handleInputChange("references",value)}
            placeholder={"references"}
            id={"references"}
            name={"references"}
          />
        </div>
        <div>
          <TextArea 
            label={"CWEs"}
            rows={4}
            value={data.details[0].cwes}
            onChange={(value) => handleInputChange("cwes",value)}
            placeholder={"cwes"}
            id={"cwes"}
            name={"cwes"}
          />
        </div>
        
      </div>
    </>
  );

};

export default AddVulnerability;