import PrimaryButton from "../../components/button/PrimaryButton"
import SimpleInput from "../../components/input/SimpleInput";
import SelectDropdown from "../../components/dropdown/SelectDropdown";
import { t } from "i18next"
import { useEffect, useState } from "react";
import TextArea from '../../components/text/TextArea';
import RichText from '../../components/text/RichText';
import { XMarkIcon } from '@heroicons/react/24/outline';
import Modal from "../../components/modal/Modal";
import { postVulnerability } from "../../services/vulnerabilities";


type Details = {
  locale: string;
  title: string;
  vulnType: string;
  description: string;
  observation: string;
  remediation: string;
  cwes: string[];
  references: string[];
  customFields: string[];
} 

type AddVulnerabilityData = {
  cvssv3: string;
  priority: number | "";
  remediationComplexity: number | "";
  details: Details[];
  category: string; 
};

type LangList = {
  id: number,
  language: ListItem;
}

interface ListItem {
  id: number;
  value: string;
  label?: string;
  locale?: string;
}

interface addVulnerabilityProps {
  isOpen: boolean;
  handlerIsOpen: React.Dispatch<React.SetStateAction<boolean>>;
  categoryVuln: ListItem|null;
  languages: ListItem[]
  types: ListItem[];
  refreshVulns: () => void;
}


const AddVulnerability: React.FC<addVulnerabilityProps> = ({ isOpen, handlerIsOpen, categoryVuln, languages, types, refreshVulns}) => {
  
  const [openModal, setOpenModal] = useState(false)
  const [error, setError] = useState<string | null>(null);
  const [changed, setChanged] = useState<boolean>(false)

  const closeSlidingPage = () => {
    setOpenModal(false);
    handlerIsOpen(false);
  }
  

  const handleSubmitNewVulnerability = async () => {
    console.log(data)
    console.log([data])
    /*
    
    try {
      await postVulnerability([data]);
    } catch (error) {
      setError("Error creating audit");
      console.error("Error:", error);
    }
    */
    refreshVulns();
    handlerIsOpen(!isOpen);
  };


  const complexityOptions = [
    { id: 1, value: t('easy')},
    { id: 2, value: t('medium') },
    { id: 3, value: t('complex') },
  ]

  const priorityOptions = [
    { id: 1, value: t('low')},
    { id: 2, value: t('medium') },
    { id: 3, value: t('high') },
    { id: 4, value: t('urgent') },
  ]

  const [complexity, setComplexity] = useState<ListItem|null>(null)
  const [priority, setPriority] = useState<ListItem|null>(null)
  
  const [language, setLanguage] = useState<ListItem>(languages[0])

  // Falta filtrar unicamente por los del idioma actual
  const [type, setType] = useState<ListItem|null>(null)
  
  const [categorySelected, setCategorySelected] = useState<ListItem>(
    categoryVuln ? categoryVuln : {id: 0, label: t('noCategory'), value: ""}
  )

  const [details, setDetails] = useState<Details[]>([])
  
  const [detail, setDetail] = useState<Details>({
    locale: language.value,
    title: "",
    vulnType: "",
    description: "",
    observation: "",
    remediation: "",
    cwes: [],
    references: [],
    customFields: []
  })


  const [data, setData] = useState<AddVulnerabilityData>({
    cvssv3: "",
    remediationComplexity: "",
    details: [],
    category: categorySelected.value,
    priority: ""
  })

  // Add new lang
  const [langList, setLangList] = useState<LangList[]>([
    {
      id: 0,
      language: languages[0]
    }
  ])
  const [currentLanguageIndex, setCurrentLanguageIndex] = useState<number>(0)

  const addNewDetail = (localeValue: string) => {
    const newDetail: Details = {
      locale: localeValue,
      title: '',
      vulnType: '',
      description: '',
      observation: '',
      remediation: '',
      cwes: [],
      references: [],
      customFields: [],
    };
    setDetail(newDetail)
  }

  const addNewDetailv2 = (localeValue: string) => {
    setData(prevData => ({
      ...prevData,
      details: [
        ...prevData.details.map(detail => ({
          ...detail,
          // AquÃ­ puedes asegurarte de copiar cualquier propiedad profundamente si es necesario
          description: detail.description,
          cwes: [...detail.cwes],
          references: [...detail.references],
          customFields: [...detail.customFields],
        })),
        {
          locale: localeValue,
          title: "",
          vulnType: "",
          description: "",
          observation: "",
          remediation: "",
          cwes: [],
          references: [],
          customFields: []
        }
      ]
    }));
  } 

 

  const handleLanguageChange = (item: ListItem) => {
    // ITEM: Nuevo elemento

    // Verificar si el anterior detail existe
    const findLang = details.findIndex(detailLocale => detailLocale.locale === detail.locale)

    // Si el anterior existe, se modifica. Si no, se agrega
    if (findLang !== -1) {
      const updatedDetails = [...details];

      updatedDetails[findLang] = {...detail};
      setDetails(updatedDetails)
    } else {
      details.push(detail)
      //addNewDetail(item.value);
    }
    
    // Verificar si el nuevo detail existe
    const findLangItem = details.findIndex(detailLocale => detailLocale.locale === item.value)

    // Si el nuevo detail existe, se actualiza a ese existente. Si no, se crea uno nuevo!
    if (findLangItem !== -1) {
      setDetail(details[findLangItem])
    }
    findLangItem !== -1 ? setDetail(details[findLangItem]) : addNewDetail(item.value);
    // Setear nuevo idioma
    setLanguage(item);

  };

  /*

  const handleInputChange = (field: string, value: string) => {
    changed ? changed : setChanged(true) 

    setData(prevData => ({
      ...prevData,
      details: prevData.details.map((detail, index) => 
        index === currentLanguageIndex
          ? {
              ...detail,
              [field]: field === 'cwes' || field === 'references'
                ? value.split('\n')
                : value
            }
          : detail
      )
    }));
  };
  */

  const handleInputChange = (field: string, value: string) => {
    changed ? changed : setChanged(true) 
    setDetail(prevDetail => ({
      ...prevDetail,
      [field]: field === 'cwes' || field === 'references'
      ? value.split('\n')
      : value
      })
    )
    /*
    setData(prevData => ({
      ...prevData,
      details: prevData.details.map((detail, index) => 
        index === currentLanguageIndex
          ? {
              ...detail,
              [field]: field === 'cwes' || field === 'references'
                ? value.split('\n')
                : value
            }
          : detail
      )
    }));
    */
   /*
    setDetail(prevDetails => 
      prevDetails.map((detail, index) => 
        index === currentLanguageIndex
          ? {
              ...detail,
              [field]: field === 'cwes' || field === 'references'
                ? value.split('\n')
                : value
            }
          : detail
      )
    );
    */
  };
  

  return (
    <>
      <div
        className={`fixed inset-0 bg-black bg-opacity-50 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}
        onClick={() => changed ? setOpenModal(true) : closeSlidingPage()}
        aria-hidden="true"
      />
      {openModal && 
        <div className="fixed z-10">
          <Modal 
            title={t('msg.doYouWantToLeave')}
            onCancel={() => changed ? setOpenModal(true) : closeSlidingPage()}
            onSubmit={closeSlidingPage}
            cancelText={t('btn.stay')}
            submitText={t('btn.confirm')}
            isOpen={openModal}
            disablehr={true}
          >
          <></>
          </Modal>
        </div>
      }

      <div
        className={`fixed top-0 right-0 h-full w-1/2 bg-gray-700 shadow-lg transform transition-transform duration-300 ${
          isOpen ? 'translate-x-0 overflow-y-auto' : 'translate-x-full'}`}
      >
        <div className="ml-3 mt-3 flex justify-between items-center">
          <div className="flex items-center">
            <h3 className="text-xl font-bold p-1">{t('addVulnerability')}</h3>
            <span className="p-4 rounded-md border-0 text-white">{categorySelected.label}</span>
          </div>
          <button
            onClick={() => changed ? setOpenModal(true) : closeSlidingPage()}
            className="bg-transparent text-white p-2 rounded mx-3"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>
        <hr className="h-1 my-3 bg-gray-600 border-0 rounded" />
        <div className="flex items-center">
          <div className="w-2/3 p-4">
            <SimpleInput
                label={t('title')}
                id="title"
                name="title"
                type="text"
                placeholder="search"
                value={detail.title}
                onChange={(value) => handleInputChange("title",value)}
            />
          </div>
          <div className="w-1/6 p-4">
            <SelectDropdown 
              title={t('type')} 
              items={types}
              selected={type}
              onChange={setType}
              placeholder=""
            />
          </div>
          <div className="w-1/6 p-4 relative">
            <SelectDropdown 
              title={t('language')} 
              items={languages}
              selected={language}
              onChange={handleLanguageChange}
            />
          </div>
            
        </div>
        <div>
          <RichText 
            label={t('description')}
            value={detail.description}
            onChange={(value) => handleInputChange("description",value)}
            placeholder={"description"}
          />
        </div>
        <div>
          <RichText 
            label={t('observation')}
            value={detail.observation}
            onChange={(value) => handleInputChange("observation",value)}
            placeholder={"observation"}
          />
        </div>
        <div>
          <RichText 
            label={t('remediation')}
            value={detail.remediation}
            onChange={(value) => handleInputChange("remediation",value)}
            placeholder={"remediation"}
          />
        </div>

        
        
        <div className="flex">
          <div className="w-1/2 p-4">
            <SelectDropdown 
              title={t('remediationComplexity')} 
              items={complexityOptions}
              selected={complexity}
              onChange={setComplexity}
            />
          </div>
          <div className="w-1/2 p-4 relative">
            <SelectDropdown 
              title={t('remediationPriority')} 
              items={priorityOptions}
              selected={priority}
              onChange={setPriority}
            />
          </div>
        </div>
        <div>
          <TextArea 
            label={t('references')}
            rows={4}
            value={Array.isArray(detail.references) ? detail.references.join('\n') : detail.references}
            onChange={(value) => handleInputChange("references",value)}
            placeholder={"references"}
            id={"references"}
            name={"references"}
          />
        </div>
        <div>
          <TextArea 
            label={"CWEs"}
            rows={4}
            value={Array.isArray(detail.cwes) ? detail.cwes.join('\n') : detail.cwes}
            onChange={(value) => handleInputChange("cwes",value)}
            placeholder={"cwes"}
            id={"cwes"}
            name={"cwes"}
          />
        </div>
        <div className="mb-2 mx-4 flex justify-end">
          <PrimaryButton onClick={handleSubmitNewVulnerability}>
            <span>{t('addVulnerability')}</span>
          </PrimaryButton>
        </div>
      </div>
      
    </>
  );

};

export default AddVulnerability;