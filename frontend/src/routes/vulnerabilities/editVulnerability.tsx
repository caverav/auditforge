import { XMarkIcon } from '@heroicons/react/24/outline';
import { Chip } from '@mui/material';
import { t } from 'i18next';
import { useEffect, useState } from 'react';
import { toast, Toaster } from 'sonner';

import PrimaryButton from '../../components/button/PrimaryButton';
import SelectDropdown from '../../components/dropdown/SelectDropdown';
import SimpleInput from '../../components/input/SimpleInput';
import Modal from '../../components/modal/Modal';
import RichText from '../../components/text/RichText';
import TextArea from '../../components/text/TextArea';
import {
  postDescriptionCWE,
  updateVulnerability,
} from '../../services/vulnerabilities';

type Details = {
  locale: string;
  title?: string;
  vulnType?: string;
  description?: string;
  observation?: string;
  remediation?: string;
  cwes: string[];
  references: string[];
  customFields: string[];
};

type VulnerabilityData = {
  _id: string;
  cvssv3: string | null;
  priority?: number | '';
  remediationComplexity?: number | '';
  details: Details[];
  status?: number;
  category?: string | null;
  __v: number;
  createdAt?: string;
  updatedAt?: string;
};

type VulnerabilityDataProps = {
  cvssv3: string | null;
  priority?: number | '';
  remediationComplexity?: number | '';
  category?: string | null;
};

type ListItem = {
  id: number;
  value: string;
  label?: string;
  locale?: string;
};

type ListItemCategory = {
  id: number;
  value: string;
  label?: string;
  isNull?: boolean;
};

type EditVulnerabilityProps = {
  isOpen: boolean;
  handlerIsOpen: React.Dispatch<React.SetStateAction<boolean>>;
  categories: ListItemCategory[];
  languages: ListItem[];
  types: ListItem[];
  refreshVulns: () => void;
  currentVuln: VulnerabilityData;
  handleOnSuccess: (message: string) => void;
};

type PostDescription = {
  vuln: string;
};

const EditVulnerability: React.FC<EditVulnerabilityProps> = ({
  isOpen,
  handlerIsOpen,
  categories,
  languages,
  types,
  refreshVulns,
  currentVuln,
  handleOnSuccess,
}) => {
  const [openModal, setOpenModal] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [changed, setChanged] = useState<boolean>(false);

  const [categorySelected, setCategorySelected] =
    useState<ListItemCategory | null>(null);
  const [categoryChanged, setCategoryChanged] = useState<boolean>(false);

  const [selectedLanguage, setSelectedLanguage] = useState<ListItem>(
    languages.find(lang => lang.value === currentVuln.details[0].locale) ??
      languages[0],
  );

  const [type, setType] = useState<ListItem | null>(
    currentVuln.details[0].vulnType
      ? (types.find(
          typeIter => typeIter.value === currentVuln.details[0].vulnType,
        ) ?? null)
      : null,
  );
  const [typesFiltered, setTypesFiltered] = useState<ListItem[]>(
    types.filter(typeIter => typeIter.locale === currentVuln.details[0].locale),
  );

  const [cweButtonChanged, setCweButtonChanged] = useState<boolean>(false);
  const [cweRecommendation, setCweRecommendation] = useState('');

  const complexityOptions = [
    { id: 1, value: t('easy') },
    { id: 2, value: t('medium') },
    { id: 3, value: t('complex') },
  ];

  const priorityOptions = [
    { id: 1, value: t('low') },
    { id: 2, value: t('medium') },
    { id: 3, value: t('high') },
    { id: 4, value: t('urgent') },
  ];

  const [complexity, setComplexity] = useState<ListItem | null>(
    currentVuln.remediationComplexity
      ? complexityOptions[currentVuln.remediationComplexity - 1]
      : null,
  );

  const [priority, setPriority] = useState<ListItem | null>(
    currentVuln.priority ? complexityOptions[currentVuln.priority - 1] : null,
  );

  const [data, setData] = useState<VulnerabilityDataProps>({
    cvssv3: currentVuln.cvssv3 ?? '',
    remediationComplexity: currentVuln.remediationComplexity ?? '',
    category: currentVuln.category ?? null,
    priority: currentVuln.priority ?? '',
  });

  const [details, setDetails] = useState<Details[]>(
    currentVuln.details.map(detailIter => ({
      locale: detailIter.locale,
      title: detailIter.title ?? '',
      vulnType: detailIter.vulnType ?? '',
      description: detailIter.description ?? '',
      observation: detailIter.observation ?? '',
      remediation: detailIter.remediation ?? '',
      cwes: detailIter.cwes,
      references: detailIter.references,
      customFields: detailIter.customFields,
    })),
  );

  const [detail, setDetail] = useState<Details>(details[0]);

  const closeSlidingPage = () => {
    setOpenModal(false);
    handlerIsOpen(false);
  };

  const addNewDetail = (localeValue: string) => {
    const newDetail: Details = {
      locale: localeValue,
      title: '',
      vulnType: '',
      description: '',
      observation: '',
      remediation: '',
      cwes: [],
      references: [],
      customFields: [],
    };
    setDetail(newDetail);
  };

  const handlerCategoryChange = (item: ListItem) => {
    setCategorySelected(item);
    setCategoryChanged(true);
    if (changed === false) {
      setChanged(true);
    }
  };

  const handleTypeChange = (item: ListItem) => {
    if (changed === false) {
      setChanged(true);
    }
    setDetail(prevDetail => ({
      ...prevDetail,
      vulnType: item.value,
    }));
    setType(item);
  };

  const handleLanguageChange = (item: ListItem) => {
    if (changed === false) {
      setChanged(true);
    }

    const findLangItem = details.findIndex(
      detailLocale => detailLocale.locale === item.value,
    );

    if (findLangItem !== -1) {
      setDetail(details[findLangItem]);
      setType(
        types.find(
          typeIter => typeIter.locale === details[findLangItem].locale,
        ) ?? null,
      );
    } else {
      addNewDetail(item.value);
      setType(null);
    }
    setSelectedLanguage(item);

    setTypesFiltered(types.filter(typeIter => typeIter.locale === item.value));
  };

  const handleDropdownChange = (name: string, item: ListItem) => {
    if (changed === false) {
      setChanged(true);
    }
    setData(prevData => ({
      ...prevData,
      [name]: item.id,
    }));

    name === 'priority' ? setPriority(item) : setComplexity(item);
  };

  const handleInputChange = (field: string, value: string) => {
    if (changed === false) {
      setChanged(true);
    }
    setDetail(prevDetail => ({
      ...prevDetail,
      [field]:
        field === 'cwes' || field === 'references' ? value.split('\n') : value,
    }));
  };

  useEffect(() => {
    const findLang = details.findIndex(
      detailLocale => detailLocale.locale === detail.locale,
    );

    if (findLang !== -1) {
      const updatedDetails = [...details];

      if (JSON.stringify(updatedDetails[findLang]) !== JSON.stringify(detail)) {
        updatedDetails[findLang] = { ...detail };
        setDetails(updatedDetails);
      }
    } else {
      details.push(detail);
    }
  }, [detail, details]);

  const handleCWERecomendation = async () => {
    if (detail.description === '' || detail.description === '<p><br></p>') {
      toast.error('Debes añadir una descripción');
      // Cambiar el estado de required
      return;
    }
    const descriptionCWE: PostDescription = {
      vuln: detail.description ?? '',
    };

    try {
      const responseCWE = await postDescriptionCWE(descriptionCWE);
      setCweRecommendation(responseCWE.result[0].label);
      setCweButtonChanged(true);
    } catch (error) {
      //setErrorText("Error creating vulnerability");
      console.error('Error:', error);
      toast.error('An error occurred during the recommendation process');
      return;
    }
  };

  const handleClickChip = () => {
    if (changed === false) {
      setChanged(true);
    }
    setDetail(prevDetail => ({
      ...prevDetail,
      cwes: [cweRecommendation, ...prevDetail.cwes],
    }));
    setCweButtonChanged(false);
  };

  const filterEmptyDetails = () => {
    const filteredDetails: Details[] = details.map(
      ({ locale, cwes, references, customFields, ...rest }) => {
        const filteredRest = Object.fromEntries(
          Object.entries(rest).filter(([_, value]) => value !== ''),
        );

        return {
          locale,
          ...filteredRest,
          cwes,
          references,
          customFields,
        };
      },
    );
    return filteredDetails;
  };

  const updaterVulnData = (parsedDetails: Details[]) => {
    const editvulnData: VulnerabilityData = {
      _id: currentVuln._id,
      __v: currentVuln.__v || 0,
      cvssv3: data.cvssv3 !== '' ? data.cvssv3 : null,
      status: currentVuln.status ?? 0,
      details: [...parsedDetails],
      ...(data.remediationComplexity !== '' && {
        remediationComplexity: data.remediationComplexity,
      }),
      ...(data.priority !== '' && {
        priority: data.priority,
      }),
      createdAt: currentVuln.createdAt ?? new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      ...(categoryChanged
        ? categorySelected?.isNull === true
          ? { category: null }
          : { category: categorySelected?.value }
        : data.category
          ? { category: data.category }
          : {}),
    };
    return editvulnData;
  };

  const handleSubmitNewVulnerability = async () => {
    /*
    const hasEmptyTitle = details.some(detailIter => detailIter.title === '');
    if (hasEmptyTitle) {
      toast.error(t('err.titleRequired'));
      return;
    }
    */
    const parsedDetails = filterEmptyDetails();
    const editvulnData = updaterVulnData(parsedDetails);

    try {
      const response = await updateVulnerability(editvulnData);
      if (response) {
        handleOnSuccess(t('msg.vulnerabilityUpdatedOk'));
      }
    } catch (error) {
      setError('Error editing vulnerability');
      console.error('Error:', error);
      toast.error('Error editing vulnerability');
      return;
    }

    refreshVulns();
    handlerIsOpen(!isOpen);
  };

  return (
    <>
      <div
        aria-hidden="true"
        className={`fixed inset-0 bg-black bg-opacity-50 transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}
        onClick={() => (changed ? setOpenModal(true) : closeSlidingPage())}
      />
      {openModal ? (
        <div className="fixed z-10">
          <Modal
            cancelText={t('btn.stay')}
            disablehr={true}
            isOpen={openModal}
            onCancel={() => setOpenModal(false)}
            onSubmit={closeSlidingPage}
            submitText={t('btn.confirm')}
            title={t('msg.doYouWantToLeave')}
          >
            <span />
          </Modal>
        </div>
      ) : null}
      <Toaster />
      <div
        className={`fixed top-0 right-0 h-full w-1/2 bg-gray-700 shadow-lg transform transition-transform duration-300 ${
          isOpen ? 'translate-x-0 overflow-y-auto' : 'translate-x-full'
        }`}
      >
        <div className="ml-3 mt-2 flex justify-between items-center">
          <div className="flex items-center">
            <h4 className="text-xl font-bold p-1">{t('editVulnerability')}</h4>
            <span className="px-4 rounded-md border-0 text-white">
              {currentVuln.category ?? t('noCategory')}
            </span>
            <span className="w-px h-12 bg-gray-300" />
            <div className="mx-2 relative">
              <SelectDropdown
                items={categories}
                onChange={value => handlerCategoryChange(value)}
                placeholder={t('changeCategory')}
                selected={categorySelected}
                title=""
              />
            </div>
          </div>
          <button
            className="bg-transparent text-white p-2 rounded mx-3"
            onClick={() => (changed ? setOpenModal(true) : closeSlidingPage())}
            type="button"
          >
            <XMarkIcon className="h-6 w-6" />
          </button>
        </div>
        <hr className="h-1 my-3 bg-gray-600 border-0 rounded" />
        <div className="flex items-center">
          <div className="w-2/3 p-4">
            <SimpleInput
              id="title"
              label={t('title')}
              name="title"
              onChange={value => handleInputChange('title', value)}
              placeholder="search"
              type="text"
              value={detail.title ?? ''}
            />
          </div>
          <div className="w-1/6 p-4">
            <SelectDropdown
              items={typesFiltered}
              onChange={handleTypeChange}
              placeholder=""
              selected={type}
              title={t('type')}
            />
          </div>
          <div className="w-1/6 p-4 relative">
            <SelectDropdown
              items={languages}
              onChange={handleLanguageChange}
              selected={selectedLanguage}
              title={t('language')}
            />
          </div>
        </div>
        <div>
          <RichText
            label={t('description')}
            onChange={value => handleInputChange('description', value)}
            placeholder="description"
            value={detail.description ?? ''}
          />
        </div>
        <div>
          <RichText
            label={t('observation')}
            onChange={value => handleInputChange('observation', value)}
            placeholder="observation"
            value={detail.observation ?? ''}
          />
        </div>
        <div>
          <RichText
            label={t('remediation')}
            onChange={value => handleInputChange('remediation', value)}
            placeholder="remediation"
            value={detail.remediation ?? ''}
          />
        </div>

        <div className="flex">
          <div className="w-1/2 p-4">
            <SelectDropdown
              items={complexityOptions}
              onChange={value =>
                handleDropdownChange('remediationComplexity', value)
              }
              selected={complexity}
              title={t('remediationComplexity')}
            />
          </div>
          <div className="w-1/2 p-4 relative">
            <SelectDropdown
              items={priorityOptions}
              onChange={value => handleDropdownChange('priority', value)}
              selected={priority}
              title={t('remediationPriority')}
            />
          </div>
        </div>
        <div>
          <TextArea
            id="references"
            label={t('references')}
            name="references"
            onChange={value => handleInputChange('references', value)}
            placeholder="references"
            rows={4}
            value={
              Array.isArray(detail.references)
                ? detail.references.join('\n')
                : detail.references
            }
          />
        </div>
        <div>
          <TextArea
            id="cwes"
            label="CWEs"
            name="cwes"
            onChange={value => handleInputChange('cwes', value)}
            placeholder="cwes"
            rows={4}
            value={
              Array.isArray(detail.cwes) ? detail.cwes.join('\n') : detail.cwes
            }
          />
        </div>
        <div className="mb-2 mx-4 flex">
          <PrimaryButton onClick={handleCWERecomendation}>
            <span>Recommend CWE</span>
          </PrimaryButton>
          {cweButtonChanged && cweRecommendation ? (
            <div className="mx-4">
              <Chip
                clickable
                color="primary"
                label={cweRecommendation}
                onClick={() => handleClickChip()}
                onDelete={() => setCweButtonChanged(false)}
              />
            </div>
          ) : null}
        </div>
        <div className="mb-2 mx-4 flex justify-end">
          <PrimaryButton onClick={handleSubmitNewVulnerability}>
            <span>{t('editVulnerability')}</span>
          </PrimaryButton>
        </div>
      </div>
    </>
  );
};

export default EditVulnerability;
