import { t } from 'i18next';
import { useCallback, useEffect, useState } from 'react';
import { toast } from 'sonner';

import PrimaryButton from '@/components/button/PrimaryButton';
import EditCard from '@/components/card/EditCard';
import SelectDropdown from '@/components/dropdown/SelectDropdown';
import SimpleInput from '@/components/input/SimpleInput';
import type { Language } from '@/services/audits';
import { getLanguages } from '@/services/audits';
import {
  createVulnerabilityType,
  getVulnerabilityTypes,
  updateVulnerabilityTypes,
  VulnerabilityType,
} from '@/services/data';

import VulnerabilityTypeList from './VulnerabilityTypeList';

type ListItem = {
  id: number;
  value: string;
  label?: string;
};

export const VulnerabilityTypes = () => {
  const [languages, setLanguages] = useState<ListItem[]>([]);
  const [currentLanguage, setCurrentLanguage] = useState<ListItem | null>(null);
  const [loadingLanguages, setLoadingLanguages] = useState<boolean>(true);

  const [vulnerabilityTypes, setVulnerabilityTypes] = useState<
    VulnerabilityType[]
  >([]);

  const [newVulnerabilityType, setNewVulnerabilityType] = useState('');

  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [loadingVulnerabilityTypes, setLoadingVulnerabilityTypes] =
    useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const dataLanguage = await getLanguages();
        const languageNames = dataLanguage.datas.map(
          (item: Language, index: number) => ({
            id: index,
            value: item.locale,
            label: item.language,
          }),
        );
        setLanguages(languageNames);
        setLoadingLanguages(false);

        if (languageNames.length > 0 && currentLanguage === null) {
          setCurrentLanguage(languageNames[0]);
        }

        const dataVulnerabilityType = await getVulnerabilityTypes();
        setVulnerabilityTypes(dataVulnerabilityType.datas);
        setLoadingVulnerabilityTypes(false);
      } catch (err) {
        setLoadingLanguages(false);
        setLoadingVulnerabilityTypes(false);
      }
    };
    fetchData().catch(console.error);
  }, []);

  const handleAddVulnerabilityType = async () => {
    if (!newVulnerabilityType.trim()) {
      setError(`${t('err.createEmptyField')}: ${t('name')}`);
      toast.error(`${t('err.createEmptyField')}: ${t('name')}`);
      return;
    }

    try {
      await createVulnerabilityType({
        locale: currentLanguage.value,
        name: newVulnerabilityType,
      });
    } catch (error) {
      setError('Error creating vulnerability type');
      toast.error('Error creating vulnerability type');
      return;
    }
    toast.success('Vulnerability Type Created Successfully!');
    setNewVulnerabilityType('');
  };

  const onClickSave = async () => {
    try {
      await updateVulnerabilityTypes(vulnerabilityTypes);
      toast.success('Vulnerability Type Updated Successfully!');
      setIsEditing(false);
    } catch (error) {
      setError('Error updating vulnerability types');
      toast.error('Error updating vulnerability types');
      setIsEditing(false);
      return;
    }
  };

  const handleUpdateVulnerabilityType = useCallback(
    (data: VulnerabilityType[]) => {
      setVulnerabilityTypes(data);
    },
    [setVulnerabilityTypes],
  );

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div className="flex flex-col gap-4">
        <div className="w-1/3">
          {!loadingLanguages ? (
            <SelectDropdown
              items={languages}
              onChange={setCurrentLanguage}
              selected={currentLanguage}
              title={t('language')}
            />
          ) : null}
        </div>
        <div className="flex items-center gap-4">
          <div className="flex-grow">
            <SimpleInput
              id="Name"
              name="Name"
              onChange={setNewVulnerabilityType}
              placeholder={t('name')}
              type="text"
              value={newVulnerabilityType}
            />
          </div>
          <PrimaryButton onClick={handleAddVulnerabilityType}>+</PrimaryButton>
        </div>
      </div>

      <EditCard
        editTitle={t('editVulnerabilityTypes')}
        isEditing={isEditing}
        onClickCancel={() => setIsEditing(false)}
        onClickEdit={() => setIsEditing(true)}
        onClickSave={onClickSave}
        title={t('editVulnerabilityTypes')}
      >
        {loadingVulnerabilityTypes ? (
          <p>{t('loading')}</p>
        ) : (
          <VulnerabilityTypeList
            data={vulnerabilityTypes}
            isDisabled={!isEditing}
            onUpdateList={handleUpdateVulnerabilityType}
          />
        )}
      </EditCard>
    </div>
  );
};
