import { ArrowPathIcon } from '@heroicons/react/24/outline';
import { t } from 'i18next';
import { useCallback, useEffect, useState } from 'react';
import { toast } from 'sonner';

import PrimaryButton from '../../../components/button/PrimaryButton';
import EditCard from '../../../components/card/EditCard';
import SelectDropdown from '../../../components/dropdown/SelectDropdown';
import SimpleInput from '../../../components/input/SimpleInput';
import type { Language } from '../../../services/audits';
import { getLanguages } from '../../../services/audits';
import {
  createVulnerabilityType,
  getVulnerabilityTypes,
  updateVulnerabilityTypes,
} from '../../../services/data';
import VulnerabilityTypeList from './VulnerabilityTypeList';

type ListItem = {
  id: number;
  value: string;
  label?: string;
};

type VulnerabilityType = {
  name: string;
  locale: string;
};

//TODO: change texts to i18n translations
export const VulnerabilityTypes = () => {
  const [languages, setLanguages] = useState<ListItem[]>([]);
  const [currentLanguage, setCurrentLanguage] = useState<ListItem | null>(null);
  const [loadingLanguages, setLoadingLanguages] = useState<boolean>(true);

  const [vulnerabilityTypes, setVulnerabilityTypes] = useState<
    { name: string; locale: string }[]
  >([]);

  const [filteredVulnerabilityTypes, setFilteredVulnerabilityTypes] = useState<
    { name: string; locale: string }[]
  >([]);

  const [newVulnerabilityType, setNewVulnerabilityType] = useState('');

  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [loadingVulnerabilityTypes, setLoadingVulnerabilityTypes] =
    useState<boolean>(true);

  const fetchLanguages = useCallback(async () => {
    setLoadingLanguages(true);

    try {
      const dataLanguage = await getLanguages();
      const languagesConverted = dataLanguage.datas.map(
        (item: Language, index: number) => ({
          id: index,
          value: item.locale,
          label: item.language,
        }),
      );
      setLanguages(languagesConverted);

      if (languagesConverted.length > 0) {
        setCurrentLanguage(languagesConverted[0]);
        setLoadingLanguages(false);
        return languagesConverted[0];
      }
    } catch (err) {
      console.error('Error:', err);
    }
    setLoadingLanguages(false);
    return null;
  }, []);

  const fetchVulnerabilityTypes = useCallback(
    async (languageSelected: ListItem | null) => {
      try {
        const dataVulnerabilityType = await getVulnerabilityTypes();
        const types = dataVulnerabilityType.datas.map(
          (item: VulnerabilityType) => ({
            name: item.name,
            locale: item.locale,
          }),
        );

        setVulnerabilityTypes(types);
        setFilteredVulnerabilityTypes(
          types.filter(
            (type: { locale: string }) =>
              type.locale === languageSelected?.value,
          ),
        );
      } catch (err) {
        console.error('Error:', err);
      }
    },
    [],
  );

  const fetchVulnTypesAndLanguages = useCallback(async () => {
    try {
      const languageSelected = await fetchLanguages();
      setLoadingVulnerabilityTypes(true);
      await fetchVulnerabilityTypes(languageSelected);
      setLoadingVulnerabilityTypes(false);
    } catch (error) {
      console.error('Error:', error);
    }
  }, [fetchLanguages, fetchVulnerabilityTypes]);

  useEffect(() => {
    void fetchVulnTypesAndLanguages();
  }, [fetchVulnTypesAndLanguages]);

  const handleAddVulnerabilityType = async () => {
    if (!newVulnerabilityType.trim()) {
      toast.error(`${t('err.createEmptyField')}: ${t('name')}`);
      return;
    }

    try {
      const addVulnType = await createVulnerabilityType({
        locale: currentLanguage?.value ?? '',
        name: newVulnerabilityType,
      });
      if (addVulnType.status === 'success') {
        await fetchVulnerabilityTypes(currentLanguage);

        toast.success('Vulnerability Type Created Successfully!');
        setNewVulnerabilityType('');
      }
    } catch (error) {
      console.error('Error:', error);

      toast.error('Error creating vulnerability type');
      return;
    }
    toast.success('There was an error');
  };

  const onChangeLanguage = (value: ListItem) => {
    setFilteredVulnerabilityTypes(
      vulnerabilityTypes.filter(type => type.locale === value.value),
    );
    setCurrentLanguage(value);
  };

  const [newVulnerabilityTypeList, setNewVulnerabilityTypeList] = useState<
    { name: string; locale: string }[]
  >([]);

  const handleUpdateVulnerabilityType = useCallback(
    (data: { name: string; locale: string }[]) => {
      setNewVulnerabilityTypeList(data);
    },
    [setNewVulnerabilityTypeList],
  );

  //TODO: fix issue with the last item added being removed
  const onClickSave = async () => {
    try {
      const differentLanguageTypes = vulnerabilityTypes.filter(
        type => type.locale !== currentLanguage?.value,
      );

      const vulnTypeMerged = [
        ...newVulnerabilityTypeList,
        ...differentLanguageTypes,
      ];

      await updateVulnerabilityTypes(vulnTypeMerged);
      toast.success('Vulnerability Type Updated Successfully!');
      setIsEditing(false);
    } catch (error) {
      console.error('Error:', error);

      toast.error('Error updating vulnerability types');
      setIsEditing(false);
      return;
    }
  };

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div className="flex flex-col gap-4">
        <div className="w-1/3">
          {!loadingLanguages ? (
            <SelectDropdown
              items={languages}
              onChange={value => onChangeLanguage(value)}
              selected={currentLanguage}
              title={t('language')}
            />
          ) : null}
        </div>
        <div className="flex items-center gap-4">
          <div className="flex-grow">
            <SimpleInput
              id="Name"
              name="Name"
              onChange={setNewVulnerabilityType}
              placeholder={t('name')}
              type="text"
              value={newVulnerabilityType}
            />
          </div>
          <PrimaryButton onClick={handleAddVulnerabilityType}>+</PrimaryButton>
        </div>
      </div>

      <EditCard
        editTitle={t('editVulnerabilityTypes')}
        isEditing={isEditing}
        onClickCancel={() => setIsEditing(false)}
        onClickEdit={() => setIsEditing(true)}
        onClickSave={onClickSave}
        title={t('editVulnerabilityTypes')}
      >
        {loadingVulnerabilityTypes ? (
          <div className="flex items-center justify-center h-min">
            <span className="flex">
              <ArrowPathIcon className="h-8 w-8 animate-spin text-blue-500" />
            </span>
          </div>
        ) : (
          <VulnerabilityTypeList
            data={filteredVulnerabilityTypes}
            isDisabled={!isEditing}
            onUpdateList={handleUpdateVulnerabilityType}
          />
        )}
      </EditCard>
    </div>
  );
};
