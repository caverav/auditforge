import { Bars2Icon } from '@heroicons/react/24/outline';
import React, { useEffect, useState } from 'react';

import PrimaryButton from '../../../components/button/PrimaryButton';
import SimpleInput from '../../../components/input/SimpleInput';
import DraggableList from '../../../components/table/DraggableTable';

type CategoryItem = {
  name: string;
  sortBy: string;
};

type CategoryListProps = {
  data: CategoryItem[];
  isDisabled: boolean;
  onUpdateList: (data: CategoryItem[]) => void;
};

const CategoryList: React.FC<CategoryListProps> = ({
  data,
  isDisabled,
  onUpdateList,
}) => {
  const [rows, setRows] = useState<
    { name: string; sortBy: string; id: string }[]
  >(data.map((row, index) => ({ ...row, id: index.toString() })));

  const handleInputChange = (
    id: string,
    field: keyof CategoryItem,
    value: string | boolean,
  ) => {
    setRows(prevRows =>
      prevRows.map(row => (row.name === id ? { ...row, [field]: value } : row)),
    );
  };

  const handleRemoveRow = (id: string) => {
    setRows(rows.filter(row => row.name !== id));
  };

  const renderRow = (row: CategoryItem) => (
    <div
      className={
        isDisabled
          ? 'grid grid-cols-1 md:grid-cols-2 place-items-center'
          : 'grid grid-cols-1 md:grid-cols-3 place-items-center'
      }
    >
      {!isDisabled ? (
        <div>
          <Bars2Icon className="size-4" />
        </div>
      ) : null}
      <div className="pr-2">
        <SimpleInput
          disabled={isDisabled}
          id="name"
          name="name"
          onChange={e => handleInputChange(row.name, 'name', e)}
          placeholder="Category Name"
          type="text"
          value={row.name}
        />
      </div>
      <div className="pr-2">
        <SimpleInput
          disabled={isDisabled}
          id="sortBy"
          name="sortBy"
          onChange={e => handleInputChange(row.name, 'sortBy', e)}
          placeholder="Sort By"
          type="text"
          value={row.sortBy}
        />
      </div>
      {!isDisabled ? (
        <div>
          <PrimaryButton color="red" onClick={() => handleRemoveRow(row.name)}>
            X
          </PrimaryButton>
        </div>
      ) : null}
    </div>
  );

  useEffect(() => {
    if (rows.map(row => row.id).length !== data.length) {
      setRows(
        data.map((section, index) => ({ ...section, id: index.toString() })),
      );
    }
  }, [data, rows]);

  useEffect(() => {
    onUpdateList(rows);
  }, [onUpdateList, rows]);

  return (
    <div>
      <DraggableList
        isDisabled={isDisabled}
        items={rows}
        onOrderChange={setRows}
        renderItem={renderRow}
      />
    </div>
  );
};

export default CategoryList;
