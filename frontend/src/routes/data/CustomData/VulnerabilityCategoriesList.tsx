import { Bars2Icon } from '@heroicons/react/24/outline';
import { t } from 'i18next';
import React, { useEffect, useRef, useState } from 'react';

import PrimaryButton from '@/components/button/PrimaryButton';
import SelectDropdown from '@/components/dropdown/SelectDropdown';
import SimpleInput from '@/components/input/SimpleInput';
import DraggableList from '@/components/table/DraggableTable';

import PrimarySwitch from './custom-components/PrimarySwitch';

type VulnerabilityCategoryItem = {
  name: string;
  sortValue: string;
  sortOrder: string;
  sortAuto: boolean;
};

type VulnerabilityCategoryListProps = {
  data: VulnerabilityCategoryItem[];
  isDisabled: boolean;
  onUpdateList: (data: VulnerabilityCategoryItem[]) => void;
};

type ListItem = {
  id: number;
  value: string;
  label?: string;
};

const sortOptions: ListItem[] = [
  { id: 1, value: 'cvssScore', label: t('cvssScore') },
  { id: 2, value: 'cvssTemporalScore', label: t('cvssTemporalScore') },
  {
    id: 3,
    value: 'cvssEnvironmentalScore',
    label: t('cvssEnvironmentalScore'),
  },
  { id: 4, value: 'priority', label: t('priority') },
  { id: 5, value: 'remediationComplexity', label: t('remediationComplexity') },
];

const orderOptions: ListItem[] = [
  { id: 1, value: 'desc', label: t('descending') },
  { id: 2, value: 'asc', label: t('ascending') },
];

const VulnerabilityCategoryList: React.FC<VulnerabilityCategoryListProps> = ({
  data,
  isDisabled,
  onUpdateList,
}) => {
  const [rows, setRows] = useState(
    data.map((row, index) => ({ ...row, id: index.toString() })),
  );
  const prevDataRef = useRef(data);

  useEffect(() => {
    if (prevDataRef.current !== data) {
      setRows(data.map((row, index) => ({ ...row, id: index.toString() })));
      prevDataRef.current = data;
    }
  }, [data]);

  const handleInputChange = (
    id: string,
    field: keyof VulnerabilityCategoryItem,
    value: string | boolean,
  ) => {
    setRows(prevRows =>
      prevRows.map(row => (row.id === id ? { ...row, [field]: value } : row)),
    );
  };

  const handleRemoveRow = (id: string) => {
    setRows(prevRows => prevRows.filter(row => row.id !== id));
  };

  const renderRow = (row: VulnerabilityCategoryItem & { id: string }) => (
    //disabled true -> no se est√° editando
    <div
      className="grid grid-cols-1 gap-4 items-center md:grid-cols-2"
      key={row.id}
    >
      <div
        className={`grid grid-cols-1 gap-4 items-center col-span-1 ${isDisabled ? 'md:grid-cols-2' : 'md:grid-cols-7'}`}
      >
        {!isDisabled ? (
          <div className="cursor-grab col-span-1">
            <Bars2Icon className="h-6 w-6 text-gray-500" />
          </div>
        ) : null}
        <div
          // eslint-disable-next-line sonarjs/no-duplicate-string
          className={`col-span-1 ${isDisabled ? 'md:col-span-1' : 'md:col-span-3'}`}
        >
          <div className="col-span-1">
            <SimpleInput
              disabled={isDisabled}
              id={`name-${row.id}`}
              label={t('name')}
              name="name"
              onChange={value => handleInputChange(row.id, 'name', value)}
              placeholder={t('name')}
              type="text"
              value={row.name}
            />
          </div>
        </div>
        <div
          className={`col-span-1 ${isDisabled ? 'md:col-span-1' : 'md:col-span-3'}`}
        >
          <SelectDropdown
            disabled={isDisabled}
            items={sortOptions}
            onChange={selected =>
              handleInputChange(row.id, 'sortValue', selected.value)
            }
            selected={
              sortOptions.find(option => option.value === row.sortValue) ??
              sortOptions[0]
            }
            title={t('sortBy')}
          />
        </div>
      </div>
      <div
        className={`grid grid-cols-1 gap-4 items-center col-span-1 ${isDisabled ? 'md:grid-cols-2' : 'md:grid-cols-7'}`}
      >
        <div
          className={`col-span-1 ${isDisabled ? 'md:col-span-1' : 'md:col-span-3'}`}
        >
          <SelectDropdown
            disabled={isDisabled}
            items={orderOptions}
            onChange={selected =>
              handleInputChange(row.id, 'sortOrder', selected.value)
            }
            selected={
              orderOptions.find(option => option.value === row.sortOrder) ??
              orderOptions[0]
            }
            title={t('sortOrder')}
          />
        </div>
        <div
          className={`col-span-1 ${isDisabled ? 'md:col-span-1' : 'md:col-span-3'}`}
        >
          <PrimarySwitch
            disabled={isDisabled}
            enabled={row.sortAuto}
            label={t('automaticSorting')}
            onChange={value => handleInputChange(row.id, 'sortAuto', value)}
          />
        </div>
        {!isDisabled ? (
          <div className="col-span-1">
            <PrimaryButton color="red" onClick={() => handleRemoveRow(row.id)}>
              X
            </PrimaryButton>
          </div>
        ) : null}
      </div>
    </div>
  );

  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const updatedData = rows.map(({ id, ...rest }) => rest);
    if (JSON.stringify(updatedData) !== JSON.stringify(data)) {
      onUpdateList(updatedData);
    }
  }, [rows, data, onUpdateList]);

  return (
    <div className="space-y-4">
      <DraggableList
        isDisabled={isDisabled}
        items={rows}
        onOrderChange={setRows}
        renderItem={renderRow}
      />
    </div>
  );
};

export default VulnerabilityCategoryList;
