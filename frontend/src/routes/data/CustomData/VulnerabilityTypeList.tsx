import { Bars2Icon } from '@heroicons/react/24/outline';
import { t } from 'i18next';
import React, { useEffect, useState } from 'react';

import PrimaryButton from '../../../components/button/PrimaryButton';
import SimpleInput from '../../../components/input/SimpleInput';
import DraggableList from '../../../components/table/DraggableTable';

type VulnerabilityTypeItem = {
  name: string;
  locale: string;
};

type VulnerabilityTypeListProps = {
  data: VulnerabilityTypeItem[];
  isDisabled: boolean;
  onUpdateList: (data: VulnerabilityTypeItem[]) => void;
};

const VulnerabilityTypeList: React.FC<VulnerabilityTypeListProps> = ({
  data,
  isDisabled,
  onUpdateList,
}) => {
  const [rows, setRows] = useState<
    {
      id: string;
      name: string;
      locale: string;
    }[]
  >(data.map((row, index) => ({ ...row, id: index.toString() })));

  const handleInputChange = (id: string, value: string) => {
    setRows(prevRows =>
      prevRows.map(row => (row.id === id ? { ...row, name: value } : row)),
    );
  };

  const handleRemoveRow = (id: string) => {
    setRows(rows.filter(row => row.id !== id));
  };

  const renderRow = (row: VulnerabilityTypeItem & { id: string }) => (
    <div
      className={
        isDisabled
          ? 'grid grid-cols-1 md:grid-cols-1'
          : 'grid grid-cols-1 md:grid-cols-12'
      }
    >
      {!isDisabled ? (
        <div className="cursor-grab col-span-1 flex items-center justify-center">
          <Bars2Icon className="size-4" />
        </div>
      ) : null}
      <div
        className={`px-2 w-full ${isDisabled ? 'md:col-span-1' : 'md:col-span-10'}`}
      >
        <SimpleInput
          disabled={isDisabled}
          id="name"
          label={t('name')}
          name="name"
          onChange={e => handleInputChange(row.id, e)}
          placeholder={t('vulnerabilityType')}
          type="text"
          value={row.name}
        />
      </div>
      {!isDisabled ? (
        <div className="col-span-1 flex md:my-0 my-4 items-end justify-center">
          <PrimaryButton color="red" onClick={() => handleRemoveRow(row.id)}>
            X
          </PrimaryButton>
        </div>
      ) : null}
    </div>
  );

  useEffect(() => {
    setRows(data.map((row, index) => ({ ...row, id: index.toString() })));
  }, [data]);

  useEffect(() => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const updatedData = rows.map(({ id, ...rest }) => rest);
    onUpdateList(updatedData);
  }, [onUpdateList, rows]);

  return (
    <div>
      <DraggableList
        isDisabled={isDisabled}
        items={rows}
        onOrderChange={setRows}
        renderItem={renderRow}
      />
    </div>
  );
};

export default VulnerabilityTypeList;
