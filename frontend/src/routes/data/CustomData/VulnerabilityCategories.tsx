import { ArrowPathIcon } from '@heroicons/react/24/outline';
import { t } from 'i18next';
import { useCallback, useEffect, useState } from 'react';
import { toast } from 'sonner';

import PrimaryButton from '@/components/button/PrimaryButton';
import EditCard from '@/components/card/EditCard';
import SelectDropdown from '@/components/dropdown/SelectDropdown';
import SimpleInput from '@/components/input/SimpleInput';
import PrimarySwitch from '@/components/switch/PrimarySwitch';
import {
  createVulnerabilityCategories,
  getVulnerabilityCategories,
  updateVulnerabilityCategories,
  VulnerabilityCategory,
} from '@/services/data';

import VulnerabilityCategoryList from './VulnerabilityCategoriesList';

type ListItem = {
  id: number;
  value: string;
  label?: string;
};

const sortOptions: ListItem[] = [
  { id: 1, value: 'cvssScore', label: t('cvssScore') },
  { id: 2, value: 'cvssTemporalScore', label: t('cvssTemporalScore') },
  {
    id: 3,
    value: 'cvssEnvironmentalScore',
    label: t('cvssEnvironmentalScore'),
  },
  { id: 4, value: 'priority', label: t('priority') },
  { id: 5, value: 'remediationComplexity', label: t('remediationComplexity') },
];

const orderOptions: ListItem[] = [
  { id: 1, value: 'desc', label: t('descending') },
  { id: 2, value: 'asc', label: t('ascending') },
];

export const VulnerabilityCategories: React.FC = () => {
  const [categories, setCategories] = useState<VulnerabilityCategory[]>([]);
  const [loadingCategories, setLoadingCategories] = useState<boolean>(true);
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [sortOption, setSortOption] = useState<ListItem>(sortOptions[0]);
  const [sortOrder, setSortOrder] = useState<ListItem>(orderOptions[0]);
  const [automaticSorting, setAutomaticSorting] = useState<boolean>(true);

  const fetchCategories = useCallback(async () => {
    setLoadingCategories(true);

    try {
      const data = await getVulnerabilityCategories();
      setCategories(data.datas);
      setLoadingCategories(false);
    } catch (err) {
      console.error(err);
    }
    setLoadingCategories(false);
    return null;
  }, []);

  useEffect(() => {
    void fetchCategories();
  }, [fetchCategories]);

  const handleAddCategory = async () => {
    if (!newCategoryName.trim()) {
      toast.error(`${t('err.createEmptyField')}: ${t('name')}`);
      return;
    }

    try {
      const addCategory = await createVulnerabilityCategories({
        name: newCategoryName,
        sortValue: sortOption.value,
        sortOrder: sortOrder.value,
        sortAuto: automaticSorting,
      });
      if (addCategory.status === 'success') {
        await fetchCategories();
        toast.success(t('msg.vulnerabilityCategoryCreatedOk'));
        setNewCategoryName('');
      }
    } catch (error) {
      toast.error(t('err.failedCreatingVulnerabilityCategory'));
    }
  };
  const [newCategories, setNewCategories] = useState<VulnerabilityCategory[]>(
    [],
  );
  const onClickSave = async () => {
    try {
      await updateVulnerabilityCategories(newCategories);
      toast.success(t('msg.vulnerabilityCatergoriesUpdatedOk'));
      setIsEditing(false);
    } catch (error) {
      console.error(error);
      toast.error(t('err.failedUpdatingVulnerabilityCategories'));
      setIsEditing(false);
    }
  };

  const onClickCancel = () => {
    void fetchCategories();
    setIsEditing(false);
  };

  const handleUpdateCategoryList = useCallback(
    (data: VulnerabilityCategory[]) => {
      setNewCategories(data);
    },
    [setNewCategories],
  );

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div className="flex flex-col">
        <div className="">
          <SimpleInput
            id="categoryName"
            name="categoryName"
            onChange={setNewCategoryName}
            placeholder={t('name')}
            type="text"
            value={newCategoryName}
          />
        </div>
        <span className="font-bold mt-6">{t('defaultSortingOptions')}</span>
        <div className="mb-4 flex flex-col md:flex-row gap-4 md:items-center">
          <div className="flex-1">
            <SelectDropdown
              items={sortOptions}
              onChange={setSortOption}
              selected={sortOption}
              title={t('sortBy')}
            />
          </div>
          <div className="flex-1">
            <SelectDropdown
              items={orderOptions}
              onChange={setSortOrder}
              selected={sortOrder}
              title={t('sortOrder')}
            />
          </div>
          <div className="flex-1">
            <PrimarySwitch
              enabled={automaticSorting}
              label={t('automaticSorting')}
              onChange={setAutomaticSorting}
            />
          </div>
        </div>
        <div className="flex items-center gap-4">
          <PrimaryButton onClick={handleAddCategory}>
            {t('btn.create')}
          </PrimaryButton>
        </div>
      </div>

      <EditCard
        editTitle={t('editCategories')}
        isEditing={isEditing}
        onClickCancel={onClickCancel}
        onClickEdit={() => setIsEditing(true)}
        onClickSave={onClickSave}
        title={t('editCategories')}
      >
        {loadingCategories ? (
          <div className="flex items-center justify-center h-min">
            <span className="flex">
              <ArrowPathIcon className="h-8 w-8 animate-spin text-blue-500" />
            </span>
          </div>
        ) : (
          <VulnerabilityCategoryList
            data={categories}
            isDisabled={!isEditing}
            onUpdateList={handleUpdateCategoryList}
          />
        )}
      </EditCard>
    </div>
  );
};

export default VulnerabilityCategories;
