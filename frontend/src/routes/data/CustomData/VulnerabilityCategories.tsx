import { useCallback, useEffect, useState } from 'react';
import { toast } from 'sonner';

import PrimaryButton from '@/components/button/PrimaryButton';
import EditCard from '@/components/card/EditCard';
import SelectDropdown from '@/components/dropdown/SelectDropdown';
import SimpleInput from '@/components/input/SimpleInput';
import PrimarySwitch from '@/components/switch/PrimarySwitch';
//import {
//  createCategory,
//  getCategories,
//  updateCategories,
//} from '@/services/data';
import CategoryList from './VulnerabilityCategoriesList';
import { t } from 'i18next';

type ListItem = {
  id: number;
  value: string;
  label?: string;
};

export const VulnerabilityCategories: React.FC = () => {
  const [categories, setCategories] = useState<
    { name: string; sortBy: string }[]
  >([]);
  const [loadingCategories, setLoadingCategories] = useState<boolean>(true);
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [newCategoryName, setNewCategoryName] = useState('');
  const [sortOption, setSortOption] = useState<ListItem | null>(null);
  const [sortOrder, setSortOrder] = useState<ListItem | null>(null);
  const [automaticSorting, setAutomaticSorting] = useState<boolean>(false);

  const sortOptions: ListItem[] = [
    { id: 1, value: 'CVSS Score', label: 'CVSS Score' },
    { id: 2, value: 'Priority', label: 'Priority' },
  ];

  const orderOptions: ListItem[] = [
    { id: 1, value: 'Descending', label: 'Descending' },
    { id: 2, value: 'Ascending', label: 'Ascending' },
  ];

  useEffect(() => {
    console.log(isEditing);
    const fetchCategories = async () => {
      try {
        //const data = await getCategories();
        //setCategories(data.datas);
        setLoadingCategories(false);
      } catch (err) {
        setLoadingCategories(false);
      }
    };
    fetchCategories().catch(console.error);
  }, [isEditing]);

  const handleAddCategory = async () => {
    if (!newCategoryName.trim()) {
      toast.error(`${t('err.createEmptyField')}: ${t('categoryName')}`);
      return;
    }

    try {
      //await createCategory({ name: newCategoryName, sortBy: sortOption?.value });
      toast.success(t('msg.categoryCreatedOk'));
      setNewCategoryName('');
    } catch (error) {
      toast.error(t('err.errorCreatingCategory'));
    }
  };

  const onClickSave = async () => {
    try {
      //await updateCategories(categories);
      toast.success(t('msg.categoriesUpdatedOk'));
      setIsEditing(false);
    } catch (error) {
      toast.error(t('err.failedUpdateCategories'));
      setIsEditing(false);
    }
  };

  const handleUpdateCategoryList = useCallback(
    (data: { name: string; sortBy: string }[]) => {
      setCategories(data);
    },
    [],
  );

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div className="flex flex-col gap-4">
        <div className="flex items-center gap-4">
          <SimpleInput
            id="categoryName"
            label={t('categoryName')}
            name="categoryName"
            onChange={setNewCategoryName}
            placeholder={t('categoryName')}
            type="text"
            value={newCategoryName}
          />
          <PrimaryButton onClick={handleAddCategory}>+</PrimaryButton>
        </div>
        <div className="flex items-center gap-4">
          <SelectDropdown
            items={sortOptions}
            onChange={setSortOption}
            selected={sortOption}
            title={t('sortBy')}
          />
          <SelectDropdown
            items={orderOptions}
            onChange={setSortOrder}
            selected={sortOrder}
            title={t('sortOrder')}
          />
          <div className="flex items-center gap-2">
            <label>{t('automaticSorting')}</label>
            <PrimarySwitch
              enabled={automaticSorting}
              onChange={setAutomaticSorting}
            />
          </div>
        </div>
      </div>

      <EditCard
        editTitle={t('editCategories')}
        isEditing={isEditing}
        onClickCancel={() => setIsEditing(false)}
        onClickEdit={() => setIsEditing(true)}
        onClickSave={onClickSave}
        title={t('editCategories')}
      >
        {loadingCategories ? (
          <p>{t('loading')}</p>
        ) : (
          <CategoryList
            data={categories}
            isDisabled={!isEditing}
            onUpdateList={handleUpdateCategoryList}
          />
        )}
      </EditCard>
    </div>
  );
};

export default VulnerabilityCategories;
