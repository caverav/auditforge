import { useCallback, useEffect, useState } from 'react';
import { useTranslation } from 'react-i18next';
import { toast } from 'sonner';

import PrimaryButton from '../../../components/button/PrimaryButton';
import EditCard from '../../../components/card/EditCard';
import SimpleInput from '../../../components/input/SimpleInput';
import {
  createCategory,
  getCategories,
  updateCategories,
} from '../../../services/data';
import CategoryList from './CategoryList';

export const VulnerabilityCategories: React.FC = () => {
  const { t } = useTranslation();
  const [newCategoryName, setNewCategoryName] = useState('');
  const [newSortOption, setNewSortOption] = useState('CVSS Score');
  const [sortOrder, setSortOrder] = useState('Descending');
  const [automaticSorting, setAutomaticSorting] = useState(false);

  const [categories, setCategories] = useState<
    { name: string; sortBy: string }[]
  >([]);

  const [loading, setLoading] = useState<boolean>(true);
  const [isEditing, setIsEditing] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchCategories = async () => {
      try {
        const data = await getCategories();
        setCategories(data.datas);
        setLoading(false);
      } catch (err) {
        setError('Error fetching categories');
        setLoading(false);
      }
    };

    void fetchCategories();
  }, [isEditing]);

  const handleAddCategory = async () => {
    if (!newCategoryName.trim()) {
      setError(`${t('err.createEmptyField')}: ${t('categoryName')}`);
      toast.error(`${t('err.createEmptyField')}: ${t('categoryName')}`);
      return;
    }

    try {
      const resp = await createCategory({
        name: newCategoryName,
        sortBy: newSortOption,
      });
      toast.success(t('msg.categoryCreatedOk'));
      setNewCategoryName('');
      setCategories(prevCategories => [
        ...prevCategories,
        { name: resp.datas.name, sortBy: resp.datas.sortBy },
      ]);
    } catch (error) {
      setError('Error creating category');
      toast.error(t('err.errorCreatingCategory'));
    }
  };

  const [newCategoryList, setNewCategoryList] = useState<
    { name: string; sortBy: string }[]
  >([]);

  const handleUpdateCategoryList = useCallback(
    (data: { name: string; sortBy: string }[]) => {
      setNewCategoryList(data);
    },
    [],
  );

  const onClickSave = async () => {
    try {
      await updateCategories(newCategoryList);
      toast.success(t('msg.categoriesUpdatedOk'));
      setIsEditing(false);
    } catch (error) {
      setError('Error updating categories');
      toast.error(t('err.failedUpdateCategories'));
      setIsEditing(false);
    }
  };

  useEffect(() => {
    error && console.error(error);
  }, [error]);

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <SimpleInput
          id="categoryName"
          label={t('categoryName')}
          name="categoryName"
          onChange={setNewCategoryName}
          placeholder={t('categoryName')}
          type="text"
          value={newCategoryName}
        />
        <SimpleInput
          id="sortOption"
          label={t('sortBy')}
          name="sortOption"
          onChange={setNewSortOption}
          placeholder={t('sortOption')}
          type="text"
          value={newSortOption}
        />
        <div>
          <PrimaryButton
            aria-label={t('addCategory')}
            onClick={handleAddCategory}
          >
            +
          </PrimaryButton>
        </div>
      </div>

      {/* Default Sorting Options Section */}
      <div className="mt-4">
        <h3>{t('defaultSortingOptions')}</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div>
            <label>{t('sortBy')}</label>
            <select
              className="form-select"
              onChange={e => setNewSortOption(e.target.value)}
              value={newSortOption}
            >
              <option value="CVSS Score">CVSS Score</option>
              <option value="Priority">Priority</option>
            </select>
          </div>
          <div>
            <label>{t('sortOrder')}</label>
            <select
              className="form-select"
              onChange={e => setSortOrder(e.target.value)}
              value={sortOrder}
            >
              <option value="Descending">Descending</option>
              <option value="Ascending">Ascending</option>
            </select>
          </div>
          <div className="flex items-center">
            <label>{t('automaticSorting')}</label>
            <Switch
              checked={automaticSorting}
              onCheckedChange={() => setAutomaticSorting(!automaticSorting)}
            />
          </div>
        </div>
        <PrimaryButton
          className="mt-2"
          onClick={() => console.log('Create button clicked')}
        >
          {t('create')}
        </PrimaryButton>
      </div>

      <EditCard
        editTitle={t('tooltip.edit')}
        isEditing={isEditing}
        onClickCancel={() => setIsEditing(false)}
        onClickEdit={() => setIsEditing(true)}
        onClickSave={onClickSave}
        title={t('listOfCategories')}
      >
        {loading ? (
          <p>{t('loading')}</p>
        ) : (
          <CategoryList
            data={categories}
            isDisabled={!isEditing}
            onUpdateList={handleUpdateCategoryList}
          />
        )}
      </EditCard>
    </div>
  );
};

export default VulnerabilityCategories;
